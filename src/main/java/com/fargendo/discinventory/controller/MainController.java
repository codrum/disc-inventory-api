package com.fargendo.discinventory.controller;

import com.fargendo.discinventory.config.JdbcConfig;
import com.fargendo.discinventory.model.Brands;
import com.fargendo.discinventory.model.Disc;
import com.fargendo.discinventory.model.DiscTypes;
import com.fargendo.discinventory.model.Status;
import com.fargendo.discinventory.model.mapper.BrandsMapper;
import com.fargendo.discinventory.model.mapper.DiscMapper;
import com.fargendo.discinventory.model.mapper.StatusMapper;
import com.fargendo.discinventory.model.mapper.DiscTypesMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@CrossOrigin("http://localhost:3000")
@RestController // This means that this class is a Controller
@RequestMapping(path="/inventory") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private StatusMapper statusMapper;

    @Autowired
    private DiscTypesMapper discTypesMapper;

    @Autowired
    private BrandsMapper brandsMapper;

    @Autowired
    private DiscMapper discMapper;

//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestBody Status user) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        userRepository.save(user);
//        return "Saved";
//    }

    @GetMapping(path="/statuses")
    public Iterable<Status> getStatuses() {
        // This returns a JSON or XML with the statuses
        return jdbcTemplate.query("SELECT * FROM status", statusMapper);
    }

    @GetMapping(path="/discTypes")
    public Iterable<DiscTypes> getDiscTypes() {
        return jdbcTemplate.query("SELECT * FROM disc_types", discTypesMapper);
    }

    @GetMapping(path="/brands")
    public Iterable<Brands> getBrands() {
        return jdbcTemplate.query("SELECT * FROM brands", brandsMapper);
    }

    @GetMapping(path="/discs")
    public List<Disc> getAllDiscs() {
        return jdbcTemplate.query("SELECT * FROM disc", discMapper);
    }

    @PostMapping(path="/brand")
    public @ResponseBody int newBrand (@RequestBody Brands brand) {
        return jdbcTemplate.update("INSERT INTO brands (name,description) VALUES(?,?)", brand.getName(), brand.getDescription());
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/disc")
    public @ResponseBody int addNewDisc(@RequestBody Disc disc){
        String query = "INSERT INTO disc " +
                "(brand_id, type_id, status_id, title, description, mold, plastic, weight, color, stamp_color, price, flatness, stiffness, used, image_url) " +
                "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        return jdbcTemplate.update(query,
                disc.getBrandId(), disc.getTypeId(), disc.getStatusId(), disc.getTitle(),
                disc.getDescription(), disc.getMold(), disc.getPlastic(), disc.getWeight(),
                disc.getColor(), disc.getStampColor(), disc.getPrice(), disc.getFlatness(),
                disc.getStiffness(),disc.getUsed(), disc.getImageUrl());

//        String query = "INSERT INTO disc VALUES('"+disc.getId()+"','"+disc.getBrandId()+"','"+disc.getTypeId()+"','"+disc.getStatusId()+"','"+disc.getTitle()+"','"+disc.getDescription()+"','"+disc.getMold()+"','"+disc.getPlastic()+"','"+disc.getWeight()+"','"+disc.getColor()+"','"+disc.getStampColor()+"','"+disc.getPrice()+"','"+disc.getFlatness()+"','"+disc.getStiffness()+"','"+disc.isUsed()+"','"+disc.getImageUrl()+"')";
//        return jdbcTemplate.update(query);
    }



    @PutMapping(path="/disc")
    public @ResponseBody int updateDiscImageUrl(@RequestBody Disc disc) {
        NamedParameterJdbcTemplate jdbcTemplateZ = new NamedParameterJdbcTemplate(new JdbcConfig().mysqlDataSource()); // replaces ? with :name for easier dynamic sql

//        System.out.println(disc.getBrandId() + " " + disc.getTypeId() + " " + disc.getStatusId() + " " + disc.getTitle() + " " +
//              disc.getDescription() + " " + disc.getMold() + " " + disc.getPlastic() + " " + disc.getWeight() + " " +
//               disc.getColor() + " " + disc.getStampColor() + " " + disc.getPrice() + " " + disc.getFlatness() + " " +
//               disc.getStiffness() + " " +disc.getUsed() + " " + disc.getImageUrl() + " " + disc.getId());

        StringJoiner set = new StringJoiner(", ", " SET ", "");
        if(disc.getBrandId() != 0)
            set.add("brand_id = :brand_id");
        if(disc.getTypeId() != 0)
            set.add("type_id = :type_id");
        if(disc.getStatusId() != 0)
            set.add("status_id = :status_id");
        if(disc.getTitle() != null)
            set.add("title = :title");
        if(disc.getDescription() != null)
            set.add("description = :description");
        if(disc.getMold() != null)
            set.add("mold = :mold");
        if(disc.getPlastic() != null)
            set.add("plastic = :plastic");
        if(disc.getWeight() != 0)
            set.add("weight = :weight");
        if(disc.getColor() != null)
            set.add("color = :color");
        if(disc.getStampColor() != null)
            set.add("stamp_color = :stamp_color");
        if(disc.getPrice() != 0.0)
            set.add("price = :price");
        if(disc.getFlatness() != 0)
            set.add("flatness = :flatness");
        if(disc.getStiffness() != 0)
            set.add("stiffness = :stiffness");
        if(disc.getUsed() != null)
            set.add("used = :used");
        if(disc.getImageUrl() != null)
            set.add("image_url = :image_url");

        String query = "UPDATE disc" + set + " WHERE disc_id = :disc_id";

        Map<String, Object> params = new HashMap<>(); // map :vars to field data
        params.put("brand_id", disc.getBrandId());
        params.put("type_id", disc.getTypeId());
        params.put("status_id", disc.getStatusId());
        params.put("title", disc.getTitle());
        params.put("description", disc.getDescription());
        params.put("mold", disc.getMold());
        params.put("plastic", disc.getPlastic());
        params.put("weight", disc.getWeight());
        params.put("color", disc.getColor());
        params.put("stamp_color", disc.getStampColor());
        params.put("price", disc.getPrice());
        params.put("flatness", disc.getFlatness());
        params.put("stiffness", disc.getStiffness());
        params.put("used", disc.getUsed());
        params.put("image_url", disc.getImageUrl());
        params.put("disc_id", disc.getId());

        return jdbcTemplateZ.update(query, params);
    }

    @DeleteMapping(path="/disc")
    public @ResponseBody int deleteDisc(@RequestBody Disc disc) {
        String query = "DELETE FROM disc WHERE disc_id = ?";
        return jdbcTemplate.update(query, disc.getId());
    }
}